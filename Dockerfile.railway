# Optimized multi-stage build for smaller image size
FROM python:3.11-slim as dependencies

WORKDIR /app

# Install minimal system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install only essential packages
COPY backend/requirements.txt .

# Install packages in optimized order with size reduction
RUN pip install --no-cache-dir --upgrade pip && \
    # Core lightweight packages first
    pip install --no-cache-dir --no-build-isolation \
        fastapi==0.104.1 \
        uvicorn[standard]==0.24.0 \
        python-multipart==0.0.6 \
        python-dotenv==1.0.0 \
        requests==2.31.0 \
        pydub==0.25.1 \
        SpeechRecognition==3.10.0 && \
    # Scientific computing (smaller footprint)
    pip install --no-cache-dir --no-build-isolation \
        numpy==1.24.3 \
        pillow==10.0.0 && \
    # PyTorch ecosystem (CPU-only, minimal)
    pip install --no-cache-dir --no-build-isolation \
        torch==2.0.1+cpu -f https://download.pytorch.org/whl/torch_stable.html && \
    pip install --no-cache-dir --no-build-isolation \
        torchaudio==2.0.2+cpu -f https://download.pytorch.org/whl/torch_stable.html && \
    # ML libraries (essential only)
    pip install --no-cache-dir \
        transformers==4.30.2 && \
    # Remaining packages
    pip install --no-cache-dir \
        groq==0.4.1

# Production stage - minimal base image
FROM python:3.11-slim

# Create non-root user
RUN useradd -m appuser && \
    mkdir -p /app/backend && \
    chown -R appuser:appuser /app

# Install only essential runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy only essential installed packages (selective copy for size reduction)
COPY --from=dependencies /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=dependencies /usr/local/bin /usr/local/bin

# Copy application code
COPY --chown=appuser:appuser backend/ /app/backend/

# Set minimal environment variables
ENV PYTHONPATH="/app"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PORT=8000

# Switch to non-root user
USER appuser

# Expose the port the app runs on
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Command to run the application
CMD ["python", "-m", "uvicorn", "backend.main:app", "--host", "0.0.0.0", "--port", "8000", "--proxy-headers"]
